// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DDona.Kiper.Domain;
namespace DDona.Kiper.Infra
{
    public partial class KiperDesafioContext : DbContext
    {
        public virtual DbSet<Apartamento> Apartamento { get; set; }
        public virtual DbSet<Condominio> Condominio { get; set; }
        public virtual DbSet<Morador> Morador { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }

        public KiperDesafioContext(DbContextOptions<KiperDesafioContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Apartamento>(entity =>
            {
                entity.HasIndex(e => e.CondominioId)
                    .HasName("FK_CONDOMINIO_APARTAMENTO_idx");

                entity.Property(e => e.Id).HasColumnType("int(11)");

                entity.Property(e => e.Bloco).HasColumnType("int(11)");

                entity.Property(e => e.CondominioId).HasColumnType("int(11)");

                entity.Property(e => e.Numero).HasColumnType("int(11)");

                entity.Property(e => e.Status).HasColumnType("bit(1)");

                entity.HasOne(d => d.Condominio)
                    .WithMany(p => p.Apartamento)
                    .HasForeignKey(d => d.CondominioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CONDOMINIO_APARTAMENTO");
            });

            modelBuilder.Entity<Condominio>(entity =>
            {
                entity.Property(e => e.Id).HasColumnType("int(11)");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Status).HasColumnType("bit(1)");
            });

            modelBuilder.Entity<Morador>(entity =>
            {
                entity.HasIndex(e => e.ApartamentoId)
                    .HasName("FK_MORADOR_APARTAMENTO_idx");

                entity.Property(e => e.Id).HasColumnType("int(11)");

                entity.Property(e => e.ApartamentoId).HasColumnType("int(11)");

                entity.Property(e => e.Celular).HasColumnType("varchar(25)");

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasColumnName("CPF")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DataNascimento).HasColumnType("date");

                entity.Property(e => e.Email).HasColumnType("varchar(200)");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.Status).HasColumnType("bit(1)");

                entity.Property(e => e.Telefone).HasColumnType("varchar(25)");

                entity.HasOne(d => d.Apartamento)
                    .WithMany(p => p.Morador)
                    .HasForeignKey(d => d.ApartamentoId)
                    .HasConstraintName("FK_MORADOR_APARTAMENTO");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.Property(e => e.Id).HasColumnType("int(11)");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.Salt)
                    .IsRequired()
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.Status).HasColumnType("bit(1)");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasColumnType("varchar(50)");
            });

            OnModelCreatingExt(modelBuilder);
        }

        partial void OnModelCreatingExt(ModelBuilder modelBuilder);
    }
}